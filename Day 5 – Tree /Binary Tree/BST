package com.Trees;

class BST {
  public static class Node {
    private final int value;
    private Node left;
    private Node right;
    private int height;

    public Node(int value) {
      this.value = value;
    }

    public int getValue() {
      return value;
    }
  }

  private Node root;

    public int height(Node node) {
    if (node == null) {
      return -1;
    }
    return node.height;
  }

  public boolean isEmpty() {
    return root == null;
  }

  public void insert(int value) {
    root = insert(value, root);
  }

  private Node insert(int value, Node node) {
      if (node == null) {
          return new Node(value);
    }

    if (value < node.value) {
      node.left = insert(value, node.left);
    }

    if (value > node.value) {
      node.right = insert(value, node.right);
    }

    node.height = Math.max(height(node.left), height(node.right)) + 1;
    return node;
  }

  public void populate(int... nums) {
      for (int num : nums) {
          insert(num);
      }
  }

  public void populatedSorted(int... nums) {
    populatedSorted(nums, 0, nums.length);
  }

  private void populatedSorted(int[] nums, int start, int end) {
      int i = start;
      while (true) {
          if (i >= end) {
              return;
          }

          int mid = (i + end) / 2;

          insert(nums[mid]);
          populatedSorted(nums, i, mid);
          i = mid + 1;
      }
  }

  public boolean balanced() {
    return balanced(root);
  }

  private boolean balanced(Node node) {
      Node node1 = node;
      while (true) {
          if (node1 == null) {
              return true;
          }
          if (Math.abs(height(node1.left) - height(node1.right)) > 1 || !balanced(node1.left)) {
              return false;
          }
          node1 = node1.right;
      }
  }

  public void display() {
    display(root, "Root Node: ");
  }

  private void display(Node node, String details) {
      while (true) {
          if (node == null) {
              return;
          }
          System.out.println(details + node.value);
          display(node.left, "Left child of " + node.value + " : ");
          details = "Right child of " + node.value + " : ";
          node = node.right;
      }
  }

}
