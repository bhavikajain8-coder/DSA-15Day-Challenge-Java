package com.LinkedList;

public class LL {

      // every linked list is having a head and a tail
        private Node head ; // beacuse i dont people to access it from out
        private Node tail;
        private int size;
        // constuctor
    public LL() {
        this.size = 0;
    }
    // insertion in LINKEDLIST

    public void insertFirst(int val){
        Node  node = new Node(val);
        node.next = head;
        head = node;

        if (tail == null){
            tail = head;
        }

        size += 1;
    }

    //INSERT AT LAST (continuation)
    public void insertLast(int val ){
        if (tail == null){
            insertFirst(val);
            return;
        }
        Node node = new Node(val);
        tail.next = node;
        tail = node;
        size++;

    }

// insert at particular index
    public void insertpoint(int val, int index){
        if (index == 0){
            insertFirst(val);
            return;
        }
        if (index == size){
            insertLast(val);
            return;
        }
        Node temp = head;
        for (int i = 1; i <index ; i++){
            temp = temp.next;
        }

        Node node = new Node(val, temp.next);
        temp.next = node;

        size++;
    }

    //DELETE first index
    public int deleteFirst(){
        int val = head.value;
        head = head.next;
        if (head==null){
            tail = null;
            }
        size--;
        return val;
    }

    public int deleteLast(){
        if (size<=1){
            return deleteFirst();

        }
        Node secondLast = get(size -2);
        int val = tail.value;
        tail =  secondLast;
        tail.next = null;

        return val;
    }

    public int delete(int index){
        if (index == 0){
            return deleteFirst();
        }
        if (index == size-1){
            return deleteLast();
        }
        Node prev = get(index-1);
        int val = prev.next.value;
        prev.next = prev.next.next;

        return val;
    }
    // find the value
     public  Node find(int value)
    {
        Node node = head;
        while(node != null){
            if (node.value == value){
                return node;
            }
            node = node.next;
        }
        return null;
    }

    public  Node get(int index)
    {
        Node node = head;
        for (int i = 0; i<index ; i ++){
            node = node.next;
        }
        return node;
    }
    //Display in linkedlist
     public void display() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.value + " -> ");
            temp = temp.next;
        }
        System.out.println("END");
    }

    private class Node{
        //ll having a class node
        // and that node is kepts as private
        // it has int value

        private int value;
        private Node next;

        // creating a constuctor it is going to contain single value
        public Node(int value) {
            this.value = value;
        }

         // creating a constuctor it is going to contain single value
        public Node(Node next) {
            this.next = next;
        }

        public Node (int value, Node next){
            this.value = value;
            this.next = next;
        }
    }
}
